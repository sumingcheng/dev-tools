user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main_ext '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        '$request_time $upstream_response_time $upstream_addr '
                        '$ssl_protocol $ssl_cipher '
                        '"$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main_ext;

    sendfile on;
    # tcp_nopush on;

    keepalive_timeout 65;

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript
               text/xml application/xml application/xml+rss text/javascript;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_min_length 256;

    server {
        listen 8080;
        listen [::]:8080;
        server_name localhost;

        # 处理静态文件
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;

           # try_files $uri $uri/ /index.html;  # 添加此行以获得SPA支持
        }

        location /api {
            # 代理传递：将/api开头的请求转发到指定的后端服务器
            proxy_pass http://www.example.com;
            # 使用 HTTP/1.1 版本进行代理通信
            proxy_http_version 1.1;
            # 设置头部信息，用于WebSocket升级请求
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            # 设置 Host 头部信息为原始请求的 Host，通常是域名和端口
            proxy_set_header Host $host;
            # 设置 X-Real-IP 头部为客户端的 IP 地址，用于记录真实的客户 IP
            proxy_set_header X-Real-IP $remote_addr;
            # 设置 X-Forwarded-For 头部，添加客户端的 IP 地址到已知的转发链中
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # 设置 X-Forwarded-Proto 头部为原始请求使用的协议（http或https）
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/stream {
            # 代理传递：将/api开头的请求转发到指定的后端服务器
            proxy_pass http://www.example.com;
            # 关闭代理缓冲。当设置为off时，Nginx会立即将客户端请求发送到后端服务器，并立即将从后端服务器接收到的响应发送回客户端。
            proxy_buffering off;
            # 启用分块传输编码。分块传输编码允许服务器为动态生成的内容分块发送数据，而不需要预先知道内容的大小。
            chunked_transfer_encoding on;
            # 开启TCP_NOPUSH，这告诉Nginx在数据包发送到客户端之前，尽可能地发送数据。这通常在sendfile使用时配合使用，可以提高网络效率。
            tcp_nopush on;
            # 开启TCP_NODELAY，这告诉Nginx不延迟发送数据，立即发送小数据包。在某些情况下，这可以减少网络的延迟。
            tcp_nodelay on;
            # 设置保持连接的超时时间，这里设置为120秒。如果在这段时间内，客户端和服务器之间没有进一步的通信，连接将被关闭。
            keepalive_timeout 120;
        }

        # 自定义错误页面
        error_page 404 /index.html;  # 将所有404错误重定向到 index.html 进行SPA处理

        error_page 500 502 503 504 /50x.html;

        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
